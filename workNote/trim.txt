　select * from user 

　　<trim prefix="WHERE" prefixoverride="AND |OR">

　　　　<if test="name != null and name.length()>0"> AND name=#{name}</if>

　　　　<if test="gender != null and gender.length()>0"> AND gender=#{gender}</if>

　　</trim>

　　假如说name和gender的值都不为null的话打印的SQL为：select * from user where    name = 'xx' and gender = 'xx'

　　在红色标记的地方是不存在第一个and的，上面两个属性的意思如下：

　　prefix：前缀　　　　　　

　　prefixoverride：去掉第一个and或者是or

 

　　2、

　　update user

　　<trim prefix="set" suffixoverride="," suffix=" where id = #{id} ">

　　　　<if test="name != null and name.length()>0"> name=#{name} , </if>

　　　　<if test="gender != null and gender.length()>0"> gender=#{gender} ,  </if>

　　</trim>

　　假如说name和gender的值都不为null的话打印的SQL为：update user set name='xx' , gender='xx'     where id='x'

　　在红色标记的地方不存在逗号，而且自动加了一个set前缀和where后缀，上面三个属性的意义如下，其中prefix意义如上：

　　suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）

　　suffix：后缀

 List<TaskDto> taskDtoList = Lists.newArrayList();对这个进行排序
/**
        @Describle:对集合按照submitTime降序排列
        @param:
        @Date:
    */
    public List<TaskDto> sortBySubmitTime(List<TaskDto> taskDtoList)
    {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Collections.sort(taskDtoList, new Comparator <TaskDto>() {
            int temp=0;
            @Override
            public int compare(TaskDto o1, TaskDto o2) {
                try {
                    //先将字符串转变成日期类型
                  temp=  sdf.parse(o2.getSubmitTime()).compareTo( sdf.parse(o1.getSubmitTime()));
                }
                catch (ParseException e) {
                    e.printStackTrace();
                }
                finally {
                    return temp;
                }
            }
        });
        return taskDtoList;
    }